// Code generated by counterfeiter. DO NOT EDIT.
package cachingfakes

import (
	"sync"

	"github.com/elliottpolk/firehose-to-syslog/caching"
)

type FakeCaching struct {
	FillCacheStub        func() error
	fillCacheMutex       sync.RWMutex
	fillCacheArgsForCall []struct{}
	fillCacheReturns     struct {
		result1 error
	}
	fillCacheReturnsOnCall map[int]struct {
		result1 error
	}
	GetAppStub        func(string) (*caching.App, error)
	getAppMutex       sync.RWMutex
	getAppArgsForCall []struct {
		arg1 string
	}
	getAppReturns struct {
		result1 *caching.App
		result2 error
	}
	getAppReturnsOnCall map[int]struct {
		result1 *caching.App
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCaching) FillCache() error {
	fake.fillCacheMutex.Lock()
	ret, specificReturn := fake.fillCacheReturnsOnCall[len(fake.fillCacheArgsForCall)]
	fake.fillCacheArgsForCall = append(fake.fillCacheArgsForCall, struct{}{})
	fake.recordInvocation("FillCache", []interface{}{})
	fake.fillCacheMutex.Unlock()
	if fake.FillCacheStub != nil {
		return fake.FillCacheStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.fillCacheReturns.result1
}

func (fake *FakeCaching) FillCacheCallCount() int {
	fake.fillCacheMutex.RLock()
	defer fake.fillCacheMutex.RUnlock()
	return len(fake.fillCacheArgsForCall)
}

func (fake *FakeCaching) FillCacheReturns(result1 error) {
	fake.FillCacheStub = nil
	fake.fillCacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCaching) FillCacheReturnsOnCall(i int, result1 error) {
	fake.FillCacheStub = nil
	if fake.fillCacheReturnsOnCall == nil {
		fake.fillCacheReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.fillCacheReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCaching) GetApp(arg1 string) (*caching.App, error) {
	fake.getAppMutex.Lock()
	ret, specificReturn := fake.getAppReturnsOnCall[len(fake.getAppArgsForCall)]
	fake.getAppArgsForCall = append(fake.getAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetApp", []interface{}{arg1})
	fake.getAppMutex.Unlock()
	if fake.GetAppStub != nil {
		return fake.GetAppStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAppReturns.result1, fake.getAppReturns.result2
}

func (fake *FakeCaching) GetAppCallCount() int {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return len(fake.getAppArgsForCall)
}

func (fake *FakeCaching) GetAppArgsForCall(i int) string {
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	return fake.getAppArgsForCall[i].arg1
}

func (fake *FakeCaching) GetAppReturns(result1 *caching.App, result2 error) {
	fake.GetAppStub = nil
	fake.getAppReturns = struct {
		result1 *caching.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCaching) GetAppReturnsOnCall(i int, result1 *caching.App, result2 error) {
	fake.GetAppStub = nil
	if fake.getAppReturnsOnCall == nil {
		fake.getAppReturnsOnCall = make(map[int]struct {
			result1 *caching.App
			result2 error
		})
	}
	fake.getAppReturnsOnCall[i] = struct {
		result1 *caching.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCaching) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fillCacheMutex.RLock()
	defer fake.fillCacheMutex.RUnlock()
	fake.getAppMutex.RLock()
	defer fake.getAppMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCaching) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ caching.Caching = new(FakeCaching)
